<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[class_copyIvarList的实用举例]]></title>
      <url>http://cgpointzero.top/2016/05/26/Ivar/</url>
      <content type="html"><![CDATA[<p>当一个模型有很多属性，给定的需求需要获取所有的属性的时候，如果一个一个写，效率很低，这个时候就可以用class_copyIvarList解决了。<br>例如有这样一个类：</p>
<pre>
#import <foundation foundation.h="">

@interface Model : NSObject

@property(nonatomic,copy)NSString *name;
@property(nonatomic,copy)NSString *sex;
@property(nonatomic,copy)NSString *idno;
@property(nonatomic,copy)NSString *address;
@property(nonatomic,copy)NSString *mobile;

+(instancetype)modelWithValues:(NSArray *)values;

@end
</foundation></pre>
现在需要获取他的以key=value的形式打印其所有属性及其值。就可以这样写了：
<pre>
-(NSString *)description{
    unsigned int count=0;
    Ivar *list=class_copyIvarList([self class], &count);
    NSMutableArray *resultArray=[NSMutableArray array];
    for(int i=0;i\<count;i++){ ivar="" var="list[i];" nsstring="" *varname="[NSString" stringwithutf8string:ivar_getname(var)];="" 去掉前面的下划线="" *tmp="[varName" substringfromindex:1];="" sel="" method="NSSelectorFromString(tmp);" #pragma="" clang="" diagnostic="" push="" ignored="" "-warc-performselector-leaks"="" id="" value="[self" performselector:method];="" pop="" if(!value||value="=NULL){" }="" *item="[NSString" stringwithformat:@"%@="%@",tmp,value];" [resultarray="" addobject:item];="" return="" componentsjoinedbystring:@"&"];="" <="" pre=""></count;i++){></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[runtime运行时方法替换的用法]]></title>
      <url>http://cgpointzero.top/2016/05/26/runtime/</url>
      <content type="html"><![CDATA[<p>在load方法中，用fc_viewDidLoad替换viewDidLoad：</p>
<pre>
/**
 *  在load中交换viewDidLoad和fc_viewDidLoad
 */
+(void)load{
    Method m1=class_getInstanceMethod([self class], @selector(viewDidLoad));
    Method m2=class_getInstanceMethod([self class], @selector(fc_viewDidLoad));
    BOOL notImplemented=class_addMethod([self class], @selector(viewDidLoad), method_getImplementation(m2), method_getTypeEncoding(m2));
    if(!notImplemented){
        method_exchangeImplementations(m1, m2);
    }
}
</pre><pre>
/**
 *  [self fc_viewDidLoad] 其实是调用了viewDidLoad的实现
 */
-(void)fc_viewDidLoad{
    NSLog(@"%s",__func__);
    [self fc_viewDidLoad];
}
</pre>]]></content>
    </entry>
    
  
  
</search>
