<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JSPatch热补丁实时修复bug]]></title>
      <url>http://cgpointzero.top/2016/08/19/JSPatchABC/</url>
      <content type="html"><![CDATA[<p>在iOS开发中，存在一个问题，出了bug，需要Xcode修复-打包-提交审核-用户更新，才能得到解决，周期很长。JSPatch的出现，解决了这个烦恼.它是一个动态更新框架，不仅可以实时的更新bug，还可以实时的添加新功能。操作简单，只需要引入小小的引擎文件，就可以用JS调用和替换任意OC方法。</p>
<p>//例如线上的app有一段出现了bug，导致crash<br>@implementation LeftViewController</p>
<p>-(void)tableView:(UITableView <em>)tableView didSelectRowAtIndexPath:(NSIndexPath </em>)indexPath{<br><br>//—————crash—————-<br><br>    NSArray *array=@[@”1”,@”2”,@”3”];<br><br>    for(int i=0;i<4;i++){<br><br>        NSLog(@”%@”,array[i]); //程序中出现的crash<br><br>    }<br><br>}<br><br>//—————crash—————<br><br>@end<br>可以通过下发这样一段JS代码，覆盖掉原方法，修复这个crash：<br>defineClass(‘LeftViewController’, {<br>tableView_didSelectRowAtIndexPath: function(tableView, indexPath) {</4;i++){<br></p>
<pre><code>var array = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];
for (var i = 0; i &lt; array.count(); i++) {
    NSLog(&quot;%&quot;, array[i]); //程序中出现的crash
}
</code></pre><p>});<br>点击tableView的崩溃就得到了实时的修复。</p>
<pre>

</pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[class_copyIvarList的实用举例]]></title>
      <url>http://cgpointzero.top/2016/05/26/Ivar/</url>
      <content type="html"><![CDATA[<p>当一个模型有很多属性，给定的需求需要获取所有的属性的时候，如果一个一个写，效率很低，这个时候就可以用class_copyIvarList解决了。<br>例如有这样一个类：</p>
<p><pre></pre></p>
<p>#import <foundation foundation.h=""></foundation></p>
<p>@interface Model : NSObject</p>
<p>@property(nonatomic,copy)NSString *name;<br>@property(nonatomic,copy)NSString *sex;<br>@property(nonatomic,copy)NSString *idno;<br>@property(nonatomic,copy)NSString *address;<br>@property(nonatomic,copy)NSString *mobile;</p>
<p>+(instancetype)modelWithValues:(NSArray *)values;</p>
<p>@end<br><br>现在需要获取他的以key=value的形式打印其所有属性及其值。就可以这样写了：<br><code><br>-(NSString <em>)description{<br>    unsigned int count=0;<br>    Ivar </em>list=class_copyIvarList([self class], &amp;count);<br>    NSMutableArray <em>resultArray=[NSMutableArray array];<br>    for(int i=0;i&lt;count;i++){<br>        Ivar var=list[i];<br>        NSString </em>varName=[NSString stringWithUTF8String:ivar_getName(var)];<br>        //去掉前面的下划线<br>        NSString *tmp=[varName substringFromIndex:1];<br>        SEL method=NSSelectorFromString(tmp);</code></p>
<pre><code>    #pragma clang diagnostic push
    #pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;
    id value=[self performSelector:method];
    #pragma clang diagnostic pop
    if(!value||value==NULL){
        value=@&quot;&quot;;
    }
    NSString *item=[NSString stringWithFormat:@&quot;%@=%@&quot;,tmp,value];

    [resultArray addObject:item];
}
free(list);
return [resultArray componentsJoinedByString:@&quot;&amp;&quot;];
</code></pre><p>}<br></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[runtime运行时方法替换的用法]]></title>
      <url>http://cgpointzero.top/2016/05/26/runtime/</url>
      <content type="html"><![CDATA[<p>在load方法中，用fc_viewDidLoad替换viewDidLoad：</p>
<pre>
/**
 *  在load中交换viewDidLoad和fc_viewDidLoad
 */
+(void)load{
    Method m1=class_getInstanceMethod([self class], @selector(viewDidLoad));
    Method m2=class_getInstanceMethod([self class], @selector(fc_viewDidLoad));
    BOOL notImplemented=class_addMethod([self class], @selector(viewDidLoad), method_getImplementation(m2), method_getTypeEncoding(m2));
    if(!notImplemented){
        method_exchangeImplementations(m1, m2);
    }
}
</pre><pre>
/**
 *  [self fc_viewDidLoad] 其实是调用了viewDidLoad的实现
 */
-(void)fc_viewDidLoad{
    NSLog(@"%s",__func__);
    [self fc_viewDidLoad];
}
</pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UITableView自定义多选删除样式]]></title>
      <url>http://cgpointzero.top/2015/11/26/multiple/</url>
      <content type="html"><![CDATA[<p>Model.h</p>
<pre>#import <foundation foundation.h="">
@interface Model : NSObject
@property(nonatomic,strong)NSString *desc;
+(instancetype)modelWithDesc:(NSString *)desc;
@end</foundation></pre>
Model.m
<pre>#import "Model.h"

@implementation Model

+(instancetype)modelWithDesc:(NSString *)desc
{
    Model *m=[Model new];
    m.desc=desc;
    return m;
}
@end</pre>
CustomCell.h
<pre>#import <uikit uikit.h="">

@interface CustomCell : UITableViewCell

@property(nonatomic,strong)UILabel *titleLb;
@property(nonatomic,strong)UIButton *selectBtn;

@end</uikit></pre>
CustomCell.m
<pre>#import "CustomCell.h"
#define kWidth ([UIScreen mainScreen].bounds.size.width)

@implementation CustomCell

- (void)awakeFromNib {
}

- (void)setSelected:(BOOL)selected animated:(BOOL)animated {
    [super setSelected:selected animated:animated];
}
-(id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    if(self=[super initWithStyle:style reuseIdentifier:reuseIdentifier])
    {
        self.backgroundColor=[UIColor blackColor];
        [self createUI];
        self.selectionStyle=UITableViewCellSelectionStyleNone;
    }
    return self;
}
-(void)createUI
{
    for(UIView *sub in self.contentView.subviews)
        [sub removeFromSuperview];

    //选择按钮
    self.selectBtn=[[UIButton alloc]initWithFrame:CGRectMake(-20, 10, 20, 20)];
    [self.selectBtn setImage:[UIImage imageNamed:@"un_select"] forState:UIControlStateNormal];
    [self .selectBtn setImage:[UIImage imageNamed:@"select"] forState:UIControlStateSelected];
    [self.contentView addSubview:self.selectBtn];
    //默认隐藏
    self.selectBtn.hidden=YES;

    // 标题Lb
    self.titleLb=[[UILabel alloc]initWithFrame:CGRectMake(20, 0,kWidth-40, 40)];
    self.titleLb.textColor=[UIColor whiteColor];
    [self.contentView addSubview:self.titleLb];
}
@end</pre>
EditViewController.h
<pre>#import <uikit uikit.h="">

@interface EditViewController : UIViewController

@end</uikit></pre>
EditViewController.m
<pre>#import "EditViewController.h"
#import "CustomCell.h"
#import "Model.h"

#define kWidth ([UIScreen mainScreen].bounds.size.width)
#define kHeight ([UIScreen mainScreen].bounds.size.height)
#define RGB(r,g,b) ([UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1.0f])

@interface EditViewController ()<uitableviewdatasource,uitableviewdelegate>
{
    UITableView *_tbView;
    NSMutableArray *_dataArray;
    NSMutableArray *_delArray;
}
//底部工具栏
@property(nonatomic,strong)UIView *toolView;

@end

@implementation EditViewController

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self setUp];
    [self initDataArray];
    [self createTbView];
    [self createBottomTools];
}
//初始设置
-(void)setUp
{
    self.automaticallyAdjustsScrollViewInsets=NO;
    //导航视图
    UIView *naviView=[[UIView alloc]initWithFrame:CGRectMake(0, 0, kWidth, 64)];
    naviView.backgroundColor=RGB(157, 25, 36);
    [self.view addSubview:naviView];
    //导航栏标题
    UILabel *titleLb=[[UILabel alloc]initWithFrame:CGRectMake(0, 20, kWidth, 44)];
    titleLb.text=@"编辑分组";
    titleLb.textColor=[UIColor whiteColor];
    titleLb.textAlignment=NSTextAlignmentCenter;
    titleLb.font=[UIFont systemFontOfSize:20];
    [naviView addSubview:titleLb];
    //编辑按钮
    UIButton *rightBtn=[[UIButton alloc]initWithFrame:CGRectMake(kWidth-60, 27, 40, 30)];
    [rightBtn setTitle:@"编辑" forState:UIControlStateNormal];
    [rightBtn setTitle:@"完成" forState:UIControlStateSelected];
    [rightBtn addTarget:self action:@selector(editAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:rightBtn];
}
//初始化数组
-(void)initDataArray
{
    //初始化数据源数组
    _dataArray=[NSMutableArray array];

    [_dataArray addObject:[Model modelWithDesc:@"我的自选"]];
    [_dataArray addObject:[Model modelWithDesc:@"我关注的牛股"]];
    [_dataArray addObject:[Model modelWithDesc:@"环保牛股"]];
    //初始化删除数组
    _delArray=[NSMutableArray array];
}
//点击编辑按钮执行的方法
-(void)editAction:(UIButton *)sender
{
    [_tbView setEditing:!_tbView.isEditing animated:YES];
    sender.selected=!sender.isSelected;

    if(sender.isSelected)
    {
        NSArray *allCells=[_tbView visibleCells];
        for(CustomCell *cell in allCells)
        {
            cell.selectBtn.hidden=NO;
            cell.selectBtn.selected=NO;
        }
        //显示底部toolView
        [self showToolView];
    }
    else
    {
        NSArray *allCells=[_tbView visibleCells];
        for(CustomCell *cell in allCells)
            cell.selectBtn.hidden=YES;

        //隐藏底部toolView
        [self hideToolView];

        //执行删除
        [_dataArray removeObjectsInArray:_delArray];
        //清空删除数组
        [_delArray removeAllObjects];
        //刷新表视图
        [_tbView reloadData];
    }
}
//表视图
-(void)createTbView
{
    _tbView=[[UITableView alloc]initWithFrame:CGRectMake(0, 64, kWidth, kHeight-64)];
    _tbView.delegate=self;
    _tbView.dataSource=self;
    _tbView.backgroundColor=[UIColor blackColor];
    _tbView.separatorColor=[UIColor whiteColor];
    _tbView.separatorStyle=UITableViewCellSeparatorStyleSingleLine;
    [self.view addSubview:_tbView];
    _tbView.scrollEnabled=NO;
    _tbView.allowsSelectionDuringEditing=YES;
    _tbView.tableFooterView=[UIView new];
}
//底部工具栏
-(void)createBottomTools
{
    _toolView=[[UIView alloc]initWithFrame:CGRectMake(0, kHeight, kWidth, 49)];
    _toolView.backgroundColor=[UIColor darkGrayColor];
    [self.view addSubview:_toolView];

    //全选按钮
    UIButton *selectAllBtn=[[UIButton alloc]initWithFrame:CGRectMake(10, 14.5, 20, 20)];
    [selectAllBtn setImage:[UIImage imageNamed:@"un_all_select"] forState:UIControlStateNormal];
    [selectAllBtn setImage:[UIImage imageNamed:@"select"] forState:UIControlStateSelected];
    [selectAllBtn addTarget:self action:@selector(selectAllRows:) forControlEvents:UIControlEventTouchUpInside];
    selectAllBtn.tag=100;
    [_toolView addSubview:selectAllBtn];

    //去选lb
    UILabel *selectAllLb=[[UILabel alloc]initWithFrame:CGRectMake(CGRectGetMaxX(selectAllBtn.frame)+5, 14.5, 40, 20)];
    selectAllLb.textColor=[UIColor whiteColor];
    selectAllLb.text=@"全选";
    selectAllLb.textAlignment=NSTextAlignmentCenter;
    [_toolView addSubview:selectAllLb];

    //删除数量
    UILabel *deleteCountLb=[[UILabel alloc]initWithFrame:CGRectMake(kWidth-70, 14.5, 60, 20)];
    deleteCountLb.text=@"删除(0)";
    deleteCountLb.textAlignment=NSTextAlignmentCenter;
    deleteCountLb.textColor=[UIColor whiteColor];
    deleteCountLb.tag=111;
    [_toolView addSubview:deleteCountLb];

    //默认隐藏
    _toolView.hidden=YES;
}
//全选
-(void)selectAllRows:(UIButton *)sender
{
    sender.selected=!sender.isSelected;
    if(_delArray.count<_dataarray.count) {="" for(model="" *m="" in="" _dataarray)="" if(![_delarray="" containsobject:m])="" [_delarray="" addobject:m];="" }="" nsarray="" *allcells="[_tbView" visiblecells];="" for(customcell="" *cell="" allcells)="" cell.selectbtn.selected="YES;" else="" removeallobjects];="" [self="" refreshdeletecountlb];="" 显示工具栏="" -(void)showtoolview="" __weak="" typeof(self)="" weakself="self;" uilabel="" *deletecountlb="(UILabel" *)[self.toolview="" viewwithtag:111];="" deletecountlb.text="@"删除(0)";" self.toolview.hidden="NO;" 全选标记置为否="" uibutton="" *selectallbtn="(UIButton" viewwithtag:100];="" selectallbtn.selected="NO;" [uiview="" animatewithduration:0.3="" animations:^{="" cgfloat="" ypos="weakSelf.toolView.frame.origin.y;" weakself.toolview.frame="CGRectMake(0," ypos,="" kwidth,="" 49);="" }];="" 隐藏工具栏="" -(void)hidetoolview="" }completion:^(bool="" finished)="" weakself.toolview.hidden="YES;" 刷新删除数量lb="" -(void)refreshdeletecountlb="" stringwithformat:@"删除(%ld)",_delarray.count];="" #pragma="" mark="" -="" uitableview="" -(nsinteger)tableview:(uitableview="" *)tableview="" numberofrowsinsection:(nsinteger)section="" return="" _dataarray.count;="" -(cgfloat)tableview:(uitableview="" heightforrowatindexpath:(nsindexpath="" *)indexpath="" 40;="" -(uitableviewcell="" *)tableview:(uitableview="" cellforrowatindexpath:(nsindexpath="" static="" nsstring="" *cid="@"cid";" customcell="" *cel="[tableView" dequeuereusablecellwithidentifier:cid];="" if(!cel)="" cel="[[CustomCell" alloc]initwithstyle:uitableviewcellstyledefault="" reuseidentifier:cid];="" model="" *model="_dataArray[indexPath.row];" cel.titlelb.text="model.desc;" cel;="" 编辑样式="" -(uitableviewcelleditingstyle)tableview:(uitableview="" editingstyleforrowatindexpath:(nsindexpath="" uitableviewcelleditingstylenone;="" 移动="" -(void)tableview:(uitableview="" moverowatindexpath:(nsindexpath="" *)sourceindexpath="" toindexpath:(nsindexpath="" *)destinationindexpath="" 交换数据="" [_dataarray="" exchangeobjectatindex:sourceindexpath.row="" withobjectatindex:destinationindexpath.row];="" 选中时执行的逻辑="" didselectrowatindexpath:(nsindexpath="" if(_tbview.isediting)="" 若选择了所有行，则将全选标记置为是="" if(_delarray.count="=_dataArray.count)" 全选标记置为是="" *)[_tbview="" cellforrowatindexpath:indexpath];="" removeobject:m];="" 置为未选中="" 刷新删除数lb="" @end="" <="" pre="">
Appdelegate.m
<pre>
＃import "AppDelegate.h"
＃import "EditViewController.h"
@interface AppDelegate ()
@end
@implementation AppDelegate
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    EditViewController *edit=[EditViewController new];
    UINavigationController *navi=[[UINavigationController alloc]initWithRootViewController:edit];
    navi.navigationBar.hidden=YES;
    navi.navigationBar.barStyle=UIBarStyleBlack;
    self.window.rootViewController=navi;
    return YES;
}</pre>

<p><img src="http://upload-images.jianshu.io/upload_images/937405-8a6d5aadc54c8000.gif?imageMogr2/auto-orient/strip" alt="效果图"><br>最后附上<a href="https://github.com/Insfgg99x/MultiDeleteAndMove" target="_blank" rel="external">GitHub源码地址</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/937405-231806b43dc36e61.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</_dataarray.count)></uitableviewdatasource,uitableviewdelegate></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS静态库的制作]]></title>
      <url>http://cgpointzero.top/2015/11/03/static/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/d70a51be5af1" target="_blank" rel="external">iOS静态库的制作</a></p>
]]></content>
    </entry>
    
  
  
</search>
