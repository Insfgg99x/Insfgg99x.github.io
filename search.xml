<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[class_copyIvarList的实用举例]]></title>
      <url>http://cgpointzero.top/2016/05/26/Ivar/</url>
      <content type="html"><![CDATA[<p>当一个模型有很多属性，给定的需求需要获取所有的属性的时候，如果一个一个写，效率很低，这个时候就可以用class_copyIvarList解决了。<br>例如有这样一个类：</p>
<p><pre></pre></p>
<p>#import <foundation foundation.h=""></foundation></p>
<p>@interface Model : NSObject</p>
<p>@property(nonatomic,copy)NSString *name;<br>@property(nonatomic,copy)NSString *sex;<br>@property(nonatomic,copy)NSString *idno;<br>@property(nonatomic,copy)NSString *address;<br>@property(nonatomic,copy)NSString *mobile;</p>
<p>+(instancetype)modelWithValues:(NSArray *)values;</p>
<p>@end<br><br>现在需要获取他的以key=value的形式打印其所有属性及其值。就可以这样写了：<br><code><br>-(NSString <em>)description{<br>    unsigned int count=0;<br>    Ivar </em>list=class_copyIvarList([self class], &amp;count);<br>    NSMutableArray <em>resultArray=[NSMutableArray array];<br>    for(int i=0;i&lt;count;i++){<br>        Ivar var=list[i];<br>        NSString </em>varName=[NSString stringWithUTF8String:ivar_getName(var)];<br>        //去掉前面的下划线<br>        NSString *tmp=[varName substringFromIndex:1];<br>        SEL method=NSSelectorFromString(tmp);</code></p>
<pre><code>    #pragma clang diagnostic push
    #pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;
    id value=[self performSelector:method];
    #pragma clang diagnostic pop
    if(!value||value==NULL){
        value=@&quot;&quot;;
    }
    NSString *item=[NSString stringWithFormat:@&quot;%@=%@&quot;,tmp,value];

    [resultArray addObject:item];
}
return [resultArray componentsJoinedByString:@&quot;&amp;&quot;];
</code></pre><p>}<br></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[runtime运行时方法替换的用法]]></title>
      <url>http://cgpointzero.top/2016/05/26/runtime/</url>
      <content type="html"><![CDATA[<p>在load方法中，用fc_viewDidLoad替换viewDidLoad：</p>
<pre>
/**
 *  在load中交换viewDidLoad和fc_viewDidLoad
 */
+(void)load{
    Method m1=class_getInstanceMethod([self class], @selector(viewDidLoad));
    Method m2=class_getInstanceMethod([self class], @selector(fc_viewDidLoad));
    BOOL notImplemented=class_addMethod([self class], @selector(viewDidLoad), method_getImplementation(m2), method_getTypeEncoding(m2));
    if(!notImplemented){
        method_exchangeImplementations(m1, m2);
    }
}
</pre><pre>
/**
 *  [self fc_viewDidLoad] 其实是调用了viewDidLoad的实现
 */
-(void)fc_viewDidLoad{
    NSLog(@"%s",__func__);
    [self fc_viewDidLoad];
}
</pre>]]></content>
    </entry>
    
  
  
</search>
